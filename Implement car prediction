# Import necessary libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder

# a) Create a sample dataset
data = {
    'make': ['Toyota', 'Honda', 'Ford', 'Toyota', 'Ford', 'Honda', 'Toyota', 'Ford', 'Honda', 'Toyota'],
    'model_year': [2012, 2014, 2016, 2013, 2017, 2011, 2015, 2014, 2013, 2016],
    'mileage': [20000, 35000, 15000, 30000, 50000, 40000, 25000, 20000, 45000, 35000],
    'fuel_type': ['Petrol', 'Diesel', 'Petrol', 'Diesel', 'Diesel', 'Petrol', 'Petrol', 'Diesel', 'Petrol', 'Diesel'],
    'transmission': ['Manual', 'Automatic', 'Manual', 'Automatic', 'Manual', 'Manual', 'Automatic', 'Manual', 'Manual', 'Automatic'],
    'sale_price': [15000, 18000, 22000, 17000, 24000, 14000, 19000, 23000, 16000, 21000]
}

df = pd.DataFrame(data)

# b) Print the first five rows
print("First five rows of the dataset:")
print(df.head())

# c) Basic statistical computations
print("\nBasic statistical computations:")
print(df.describe())

# d) Columns and their data types
print("\nColumns and their data types:")
print(df.dtypes)

# e) Detect and replace null values with mode value (if any)
if df.isnull().sum().any():
    for column in df.columns:
        if df[column].isnull().any():
            mode_value = df[column].mode()[0]
            df[column].fillna(mode_value, inplace=True)

print("\nNull values after replacement (if any):")
print(df.isnull().sum())

# f) Explore the dataset using heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.show()

# g) Preprocess the dataset
# Encoding categorical variables
label_encoders = {}
for column in ['make', 'fuel_type', 'transmission']:
    label_encoders[column] = LabelEncoder()
    df[column] = label_encoders[column].fit_transform(df[column])

# h) Split the data into train and test sets
X = df.drop('sale_price', axis=1)  # Features
y = df['sale_price']  # Target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# i) Fit the Naive Bayes model
model = GaussianNB()
model.fit(X_train, y_train)

# j) Predict the model
y_pred = model.predict(X_test)

# k) Find the accuracy of the model
accuracy = accuracy_score(y_test, y_pred.round())
print("\nAccuracy of the model:", accuracy)
